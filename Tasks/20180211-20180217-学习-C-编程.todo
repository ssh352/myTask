## =============================================================================
使用 Sublime Text 运行 C 程序:

 ☐ 设置系统:
   增加新的系统：Ref： https://stackoverflow.com/questions/24225343/how-to-compile-and-run-c-in-sublime-text-3

   Tools --> Build System --> New Build System

   在里面写入内容：
   
 ☐ c 编译环境
   ```
  {
  "cmd" : ["gcc $file_name -o ${file_base_name} && ./${file_base_name}"],
  "selector" : "source.c",
  "shell": true,
  "working_dir" : "$file_path"
  }
   ```
   保存起来即可

 ☐ 使用快捷键 `ctrl+B`:
   Preferences --> Key Bindings --> 增加

   ```
  { "keys": ["ctrl+b"], "command": "build", "args": { "variant": "" } },
  { "keys": ["ctrl+shift+b"], "command": "build", "args": { "variant": "Run" } },
   ```

开发 C/C++ 程序中常用的 Sublime Text3 软件包:
   ☐ CTags: 高亮顯示 C/C++ 語言需要依靠外掛程式，開啟 Package Control 安裝 Ctag。
   ☐ SublimeAStyleFormatter: 用于格式化整个文档，可以快速的把整个脚本进行代码格式化
     ☐ `ctrl+alt+f`: 格式化整个文档
     ☐ `ctrl+k` + `ctrl+f`: 格式化选定的内容
   
使用 **项目工程** 的方式开发 c:
  ☐ 头文件和源文件分离

    分别在 .h 文件放入函数申明，在 .c 文件放入函数实体

  ☐ 分别编译各个源文件

    如有 myMath.h, myMath.c, hello,c

    ```bash
    ## 先编译成为目标文件
    gcc -c myMath.c -o myMath.o
    gcc -c hello.c -o hello.o

    ## 再把目标文件连接在一起生成主函数文件
    gcc hello.o myMath.o -o hello

    ## 运行主函数
    ./hello 
    ```

使用 `cmake` 来搭建 c/c++ 项目:
  ☐ 建立项目结构

  ```bash
  .
  ├── CMakeLists.txt
  ├── main.c
  └── math
      ├── CMakeLists.txt
      ├── myMath.c
      └── myMath.h
  ```

  ☐ 主函数
  在根目录下面放置主函数 `main.c`, 通过搭建 CMakeLists.txt。需要注意的是，main.c 引入子目录的头文件需要指定路径。

  根目录下的 CMakeLists.txt 指定连接库

  ```bash
  # CMake 最低版本号要求
  cmake_minimum_required (VERSION 2.8)
  # 项目信息
  project (demo)
  # 查找当前目录下的所有源文件
  # 并将名称保存到 DIR_SRCS 变量
  aux_source_directory(. DIR_SRCS)
  # 添加 math 子目录
  add_subdirectory(math)
  # 指定生成目标 
  add_executable(main ${DIR_SRCS})
  # 添加链接库
  target_link_libraries(main MathFunctions)
  ```

  ☐ 在库目录放置头文件
  在需要实现的各个功能模块都放在库目录，并相应的搭建 CMakeLists.txt，

  ```bash
  # 查找当前目录下的所有源文件
  # 并将名称保存到 DIR_LIB_SRCS 变量
  aux_source_directory(. DIR_LIB_SRCS)
  # 生成链接库
  add_library (MathFunctions ${DIR_LIB_SRCS})
  ```
  ☐ 开始编译
  在根目录下面运行

  ```bash
  ## 先使用 cmake 生成 make 文件
  cmake .

  ## 生成可执行文件
  make

  ## 执行
  ./main
  ```
